swagger: "2.0"
info:
  description: "API (part I) is a free REST API which is written in JavaScript, using Node.js and Express.js, to connect to MongoDB and implement all CRUD (Create, Read, Update and Delete) operations to manage user accounts."
  version: "1.0.0"
  title: "Swagger API (Part I)"
  termsOfService: "https://github.com/andretorresdg"
  contact: 
    email: "andretorresdg@usp.br"
  license: 
    name: "MIT License"
    url: "https://github.com/andretorresdg/AndreDevayAPI/blob/master/LICENSE"
tags:
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This command create a new use in MongoDB"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "invalid form of user"
    get:
      tags:
      - "user"
      summary: "Return all the users in the database"
      description: "Return all the users in the database"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
  /user/id:
    get:
      tags:
      - "user"
      summary: "Get user by ID"
      description: "Return all the info of an user (found by your ID)"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: " A alphanumeric combination that leades to an especif user "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "ID not found"
    put:
      tags:
      - "user"
      summary: "Updated an especif user"
      description: "Update the info of an especif user (found via ID)"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "A alphanumeric combination that leades to an especif user"
        required: true
        type: "string"
      - in: "body"
        name: "Login info"
        description: "All the info that will be updated"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "ID not found"
    delete:
      tags:
      - "user"
      summary: "Delete an especif user"
      description: "Delete an especif user (found via ID)"
      parameters:
      - name: "id"
        in: "path"
        description: "A alphanumeric combination that leades to an especif user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "ID not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      first_name:
        type: "string"
      last_name:
        type: "string"
      personal_phone:
        type: "string"
      password:
        type: "string"